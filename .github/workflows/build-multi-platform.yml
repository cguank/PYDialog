name: Build Multi-Platform Executives

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'windows'
        type: choice
        options:
        - windows
        - all

jobs:
  build-windows:
    runs-on: windows-latest
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'windows' || github.event.inputs.platform == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Windows executable
      run: |
        pyinstaller --onefile --console --add-data "imgs;imgs" --add-data "utils.py;." --hidden-import cv2 --hidden-import pyautogui --hidden-import numpy --hidden-import PIL --hidden-import PIL._tkinter_finder --hidden-import tkinter --hidden-import pyscreeze --hidden-import pytweening --hidden-import mouseinfo --hidden-import keyboard --hidden-import pygetwindow --hidden-import pyrect --name dialog_handler dialog_handler.py
        
    - name: Create Windows distribution package
      run: |
        # 创建README
        @"
弹窗处理程序 - Windows版本

使用说明:
1. 双击 dialog_handler.exe 运行程序
2. 程序会自动监控屏幕上的弹窗
3. 按 Ctrl+C 停止程序

注意事项:
- 确保 imgs 文件夹与 exe 文件在同一目录
- 程序需要管理员权限才能进行屏幕截图
- 如果遇到问题，请检查防火墙设置

文件结构:
dialog_handler.exe  - 主程序
imgs/              - 弹窗模板图片文件夹

构建信息:
- 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
- 构建平台: Windows
- Python版本: $(python --version)
"@ | Out-File -FilePath "dist/README.txt" -Encoding UTF8
        
        # 创建ZIP包
        Compress-Archive -Path "dist/*" -DestinationPath "dialog_handler_windows.zip" -Force
        
    - name: Get Windows file size
      id: windows_file_size
      run: |
        $size = (Get-Item "dist/dialog_handler.exe").Length
        $sizeMB = [math]::Round($size / 1MB, 2)
        echo "size=$sizeMB" >> $env:GITHUB_OUTPUT
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dialog-handler-windows
        path: |
          dist/dialog_handler.exe
          dist/imgs/
          dist/README.txt
          dialog_handler_windows.zip
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    if: github.event.inputs.platform == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build macOS executable
      run: |
        pyinstaller --onefile --console --add-data "imgs:imgs" --add-data "utils.py:." --hidden-import cv2 --hidden-import pyautogui --hidden-import numpy --hidden-import PIL --hidden-import PIL._tkinter_finder --hidden-import tkinter --hidden-import pyscreeze --hidden-import pytweening --hidden-import mouseinfo --hidden-import keyboard --hidden-import pygetwindow --hidden-import pyrect --name dialog_handler dialog_handler.py
        
    - name: Create macOS distribution package
      run: |
        # 创建README
        cat > dist/README.txt << 'EOF'
弹窗处理程序 - macOS版本

使用说明:
1. 双击 dialog_handler 运行程序
2. 程序会自动监控屏幕上的弹窗
3. 按 Ctrl+C 停止程序

注意事项:
- 确保 imgs 文件夹与可执行文件在同一目录
- 程序需要屏幕录制权限
- 如果遇到问题，请检查系统偏好设置中的安全性与隐私

文件结构:
dialog_handler     - 主程序
imgs/             - 弹窗模板图片文件夹

构建信息:
- 构建时间: $(date '+%Y-%m-%d %H:%M:%S')
- 构建平台: macOS
- Python版本: $(python --version)
EOF
        
        # 创建ZIP包
        cd dist && zip -r ../dialog_handler_macos.zip . && cd ..
        
    - name: Get macOS file size
      id: macos_file_size
      run: |
        size=$(stat -f%z "dist/dialog_handler")
        sizeMB=$(echo "scale=2; $size/1024/1024" | bc)
        echo "size=$sizeMB" >> $GITHUB_OUTPUT
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dialog-handler-macos
        path: |
          dist/dialog_handler
          dist/imgs/
          dist/README.txt
          dialog_handler_macos.zip
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Linux executable
      run: |
        pyinstaller --onefile --console --add-data "imgs:imgs" --add-data "utils.py:." --hidden-import cv2 --hidden-import pyautogui --hidden-import numpy --hidden-import PIL --hidden-import PIL._tkinter_finder --hidden-import tkinter --hidden-import pyscreeze --hidden-import pytweening --hidden-import mouseinfo --hidden-import keyboard --hidden-import pygetwindow --hidden-import pyrect --name dialog_handler dialog_handler.py
        
    - name: Create Linux distribution package
      run: |
        # 创建README
        cat > dist/README.txt << 'EOF'
弹窗处理程序 - Linux版本

使用说明:
1. 双击 dialog_handler 运行程序
2. 程序会自动监控屏幕上的弹窗
3. 按 Ctrl+C 停止程序

注意事项:
- 确保 imgs 文件夹与可执行文件在同一目录
- 程序需要X11或Wayland支持
- 如果遇到问题，请检查显示服务器设置

文件结构:
dialog_handler     - 主程序
imgs/             - 弹窗模板图片文件夹

构建信息:
- 构建时间: $(date '+%Y-%m-%d %H:%M:%S')
- 构建平台: Linux
- Python版本: $(python --version)
EOF
        
        # 创建ZIP包
        cd dist && zip -r ../dialog_handler_linux.zip . && cd ..
        
    - name: Get Linux file size
      id: linux_file_size
      run: |
        size=$(stat -c%s "dist/dialog_handler")
        sizeMB=$(echo "scale=2; $size/1024/1024" | bc)
        echo "size=$sizeMB" >> $GITHUB_OUTPUT
        
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dialog-handler-linux
        path: |
          dist/dialog_handler
          dist/imgs/
          dist/README.txt
          dialog_handler_linux.zip
        retention-days: 30

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.inputs.platform == 'all'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release assets
      run: |
        # 创建统一的发布包
        mkdir -p release
        cp dialog-handler-windows/dialog_handler_windows.zip release/
        cp dialog-handler-macos/dialog_handler_macos.zip release/
        cp dialog-handler-linux/dialog_handler_linux.zip release/
        
        # 创建发布说明
        cat > release/RELEASE_NOTES.md << 'EOF'
# 弹窗处理程序 - 多平台发布

## 下载链接
- [Windows版本](dialog_handler_windows.zip)
- [macOS版本](dialog_handler_macos.zip)
- [Linux版本](dialog_handler_linux.zip)

## 使用说明
1. 下载对应平台的压缩包
2. 解压到本地目录
3. 确保imgs文件夹包含弹窗模板图片
4. 运行可执行文件

## 系统要求
- Windows: Windows 7/8/10/11
- macOS: macOS 10.14+
- Linux: Ubuntu 18.04+ (需要X11或Wayland)

## 注意事项
- 程序需要屏幕访问权限
- 某些杀毒软件可能会误报
- 建议以管理员权限运行
EOF
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release/dialog_handler_windows.zip
        asset_name: dialog_handler_windows.zip
        asset_content_type: application/zip
      continue-on-error: true
      
    - name: Upload macOS release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release/dialog_handler_macos.zip
        asset_name: dialog_handler_macos.zip
        asset_content_type: application/zip
      continue-on-error: true
      
    - name: Upload Linux release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release/dialog_handler_linux.zip
        asset_name: dialog_handler_linux.zip
        asset_content_type: application/zip
      continue-on-error: true 